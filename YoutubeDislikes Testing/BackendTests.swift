//
//  BackendTests.swift
//  BackendTests
//
//  Created by Linus Rönnbäck Larsson on 15/9/24.
//

import Testing

@Suite("Puzzle Solver") struct PuzzleTests {
    struct zeroCounterTestData {
        let uInt8View: [UInt8]
        let expected: Int
    }
    
    @Test func testZeroCounter() {
        let testData: [zeroCounterTestData] = [
            .init(uInt8View: [6, 170, 53, 201, 186, 243, 139, 181, 145, 22, 1, 222, 79, 151, 233, 155, 198, 219, 112, 48, 90, 239, 8, 84, 58, 63, 9, 4, 228, 32, 178, 69, 194, 38, 26, 34, 13, 249, 112, 253, 73, 225, 226, 171, 235, 96, 4, 125, 187, 175, 110, 120, 117, 51, 96, 213, 63, 159, 129, 139, 66, 59, 26, 128], expected: 5),
            .init(uInt8View: [52, 179, 54, 97, 107, 35, 102, 40, 139, 155, 61, 248, 144, 9, 131, 140, 157, 158, 149, 136, 221, 96, 113, 152, 252, 82, 165, 222, 85, 114, 243, 75, 171, 225, 128, 23, 138, 168, 190, 92, 113, 20, 21, 103, 2, 74, 85, 203, 244, 3, 84, 43, 254, 143, 158, 244, 30, 12, 23, 254, 133, 22, 114, 88], expected: 2),
            .init(uInt8View: [186, 28, 164, 131, 244, 77, 239, 100, 232, 115, 6, 168, 81, 25, 69, 36, 124, 102, 24, 38, 167, 4, 151, 119, 84, 23, 159, 56, 200, 225, 191, 166, 84, 181, 81, 224, 169, 52, 161, 235, 39, 67, 152, 54, 230, 93, 48, 161, 182, 160, 129, 1, 60, 247, 152, 230, 151, 92, 11, 46, 83, 236, 172, 78], expected: 0),
            .init(uInt8View: [184, 21, 99, 111, 20, 83, 125, 88, 214, 195, 212, 130, 180, 85, 33, 225, 122, 110, 215, 221, 213, 134, 204, 97, 56, 127, 30, 10, 195, 76, 252, 245, 42, 111, 168, 229, 127, 250, 21, 57, 222, 60, 91, 23, 83, 180, 86, 116, 183, 75, 143, 219, 208, 198, 100, 117, 100, 11, 141, 55, 245, 236, 17, 247], expected: 0),
            .init(uInt8View: [226, 162, 138, 188, 241, 21, 119, 248, 236, 4, 221, 140, 255, 114, 237, 178, 125, 87, 169, 153, 100, 98, 156, 61, 85, 154, 75, 181, 244, 147, 157, 79, 177, 62, 155, 144, 102, 65, 67, 252, 201, 198, 47, 5, 135, 227, 190, 149, 22, 129, 70, 217, 214, 122, 239, 194, 45, 127, 205, 27, 36, 47, 202, 109], expected: 0),
            .init(uInt8View: [110, 238, 146, 5, 147, 63, 29, 89, 240, 249, 172, 114, 87, 203, 166, 105, 235, 35, 154, 14, 252, 71, 160, 21, 184, 225, 235, 126, 66, 120, 137, 186, 180, 54, 100, 213, 163, 193, 246, 74, 205, 40, 13, 52, 233, 46, 187, 188, 174, 179, 193, 80, 210, 41, 75, 152, 117, 22, 69, 74, 129, 244, 180, 190], expected: 1),
            .init(uInt8View: [73, 7, 100, 86, 151, 190, 184, 203, 58, 198, 42, 120, 33, 115, 240, 136, 88, 223, 18, 60, 230, 6, 93, 193, 139, 202, 244, 223, 236, 10, 87, 129, 29, 212, 217, 174, 220, 91, 83, 111, 182, 187, 175, 66, 152, 227, 254, 162, 110, 195, 219, 102, 57, 113, 108, 111, 55, 249, 113, 3, 26, 203, 84, 120], expected: 1),
            .init(uInt8View: [136, 206, 207, 5, 243, 72, 13, 71, 74, 226, 239, 127, 185, 242, 95, 252, 213, 206, 242, 114, 218, 204, 4, 177, 97, 163, 221, 167, 137, 13, 240, 185, 153, 63, 112, 42, 52, 166, 237, 207, 6, 244, 76, 195, 134, 146, 173, 254, 50, 207, 224, 162, 192, 151, 49, 91, 109, 115, 225, 174, 64, 30, 142, 116], expected: 0),
            .init(uInt8View: [116, 106, 221, 55, 118, 155, 20, 226, 174, 114, 43, 184, 59, 58, 140, 192, 68, 78, 98, 183, 252, 214, 243, 47, 224, 73, 107, 70, 206, 18, 124, 189, 195, 29, 167, 232, 15, 240, 212, 255, 22, 83, 170, 191, 124, 62, 226, 229, 164, 191, 136, 83, 231, 51, 230, 218, 236, 73, 195, 250, 101, 58, 45, 137], expected: 1),
            .init(uInt8View: [192, 183, 190, 80, 195, 100, 237, 85, 159, 45, 87, 37, 88, 63, 177, 230, 103, 160, 16, 26, 1, 125, 201, 238, 135, 204, 97, 71, 159, 185, 90, 27, 197, 91, 72, 164, 115, 187, 85, 231, 47, 124, 75, 37, 91, 60, 19, 111, 138, 29, 35, 247, 96, 108, 155, 23, 219, 111, 86, 4, 166, 30, 216, 61], expected: 0),
            .init(uInt8View: [134, 93, 204, 130, 58, 235, 207, 94, 34, 108, 232, 198, 201, 27, 49, 253, 166, 158, 12, 184, 13, 206, 167, 140, 254, 82, 153, 24, 255, 111, 99, 106, 248, 43, 145, 205, 131, 236, 253, 159, 109, 127, 172, 57, 72, 36, 12, 159, 173, 224, 181, 189, 115, 172, 5, 241, 178, 135, 105, 91, 103, 191, 26, 197], expected: 0),
            .init(uInt8View: [154, 0, 103, 54, 59, 6, 12, 70, 209, 62, 197, 12, 69, 117, 116, 254, 13, 155, 37, 225, 31, 224, 50, 146, 218, 202, 82, 160, 233, 91, 174, 213, 134, 3, 73, 11, 166, 103, 217, 62, 99, 212, 86, 232, 14, 154, 35, 236, 181, 130, 99, 68, 55, 233, 35, 166, 238, 222, 127, 116, 215, 109, 44, 89], expected: 0),
            .init(uInt8View: [39, 136, 5, 50, 35, 153, 132, 156, 171, 228, 246, 180, 144, 107, 140, 137, 133, 88, 104, 139, 101, 207, 135, 19, 3, 157, 189, 222, 139, 84, 76, 38, 226, 122, 77, 95, 75, 130, 205, 61, 129, 49, 205, 194, 68, 18, 225, 19, 86, 1, 43, 125, 121, 134, 212, 62, 0, 173, 216, 62, 163, 76, 249, 57], expected: 2),
            .init(uInt8View: [120, 216, 207, 200, 187, 231, 255, 49, 118, 219, 176, 236, 20, 172, 30, 208, 195, 147, 103, 17, 4, 60, 182, 250, 187, 101, 89, 96, 217, 9, 43, 223, 191, 253, 62, 154, 136, 213, 110, 3, 68, 45, 4, 89, 83, 49, 98, 169, 183, 108, 212, 138, 88, 112, 159, 137, 157, 231, 163, 130, 14, 20, 143, 214], expected: 1),
            .init(uInt8View: [81, 173, 56, 228, 33, 181, 42, 46, 87, 153, 45, 189, 14, 107, 8, 80, 13, 32, 15, 8, 85, 14, 70, 44, 29, 55, 107, 125, 238, 156, 51, 224, 142, 216, 251, 253, 51, 154, 103, 148, 26, 17, 202, 181, 247, 252, 175, 104, 44, 87, 148, 226, 34, 45, 183, 98, 22, 72, 173, 12, 104, 163, 236, 236], expected: 1),
            .init(uInt8View: [254, 164, 11, 180, 88, 203, 112, 233, 198, 112, 194, 36, 134, 175, 94, 93, 6, 235, 254, 27, 15, 136, 8, 103, 149, 111, 154, 39, 246, 144, 57, 252, 168, 96, 0, 116, 139, 23, 26, 233, 73, 204, 48, 21, 74, 35, 50, 68, 230, 219, 254, 203, 98, 233, 13, 196, 87, 218, 154, 49, 132, 49, 218, 120], expected: 0),
            .init(uInt8View: [225, 55, 20, 233, 44, 47, 145, 255, 228, 151, 118, 243, 127, 150, 188, 129, 60, 95, 178, 53, 91, 198, 40, 42, 67, 108, 63, 107, 186, 65, 124, 29, 190, 233, 147, 204, 12, 29, 7, 65, 40, 22, 181, 164, 6, 226, 12, 234, 74, 139, 7, 195, 126, 98, 0, 114, 115, 232, 104, 74, 165, 89, 151, 162], expected: 0),
            .init(uInt8View: [243, 141, 111, 244, 215, 73, 200, 183, 82, 169, 201, 165, 190, 184, 154, 139, 242, 236, 73, 133, 218, 54, 140, 234, 245, 243, 73, 221, 251, 197, 123, 110, 158, 183, 85, 27, 126, 6, 18, 21, 58, 4, 95, 23, 187, 206, 175, 87, 61, 140, 249, 231, 96, 38, 196, 199, 81, 134, 245, 33, 18, 223, 23, 93], expected: 0),
            .init(uInt8View: [251, 18, 211, 85, 185, 205, 164, 151, 204, 173, 128, 191, 107, 169, 71, 96, 96, 156, 230, 227, 75, 51, 11, 121, 235, 192, 149, 249, 141, 93, 187, 137, 99, 148, 177, 42, 107, 229, 138, 126, 242, 114, 177, 3, 243, 106, 202, 84, 128, 45, 109, 224, 186, 37, 223, 4, 199, 30, 240, 213, 150, 115, 164, 112], expected: 0),
            .init(uInt8View: [90, 138, 177, 128, 193, 13, 252, 64, 149, 19, 234, 66, 225, 137, 228, 18, 226, 107, 27, 115, 15, 197, 254, 228, 182, 45, 90, 95, 236, 151, 250, 186, 152, 90, 71, 215, 0, 246, 156, 245, 2, 70, 47, 157, 21, 182, 128, 143, 194, 180, 173, 86, 184, 23, 54, 205, 98, 170, 186, 108, 92, 94, 202, 30], expected: 1)
        ]
        
        for test in testData {
            #expect(countLeadingZeroes(test.uInt8View) == test.expected)
        }
    }
    
    @Test func testPuzzleSolver() async throws {
        // Write your test here and use APIs like `#expect(...)` to check expected conditions.
        
        let puzzle = PuzzleResponse(challenge: "MvCfotNLVKqBjO7Gk+t7AA==", solution: nil, difficulty: 16)
        let response = await solvePuzzle(puzzle)
        
        #expect(response == "ijkAAA==", Comment(stringLiteral: "Make sure the challenge is solved correctly"))
    }

}
